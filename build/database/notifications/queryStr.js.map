{"version":3,"sources":["../../../src/database/notifications/queryStr.js"],"names":["queryStr","Object","keys","models","forEach","modelName"],"mappings":";;;;;;;;;AAAA;;AAEA,IAAIA,QAAQ,isBAAZ;AAeAC,MAAM,CAACC,IAAP,CAAYC,MAAZ,EAAoBC,OAApB,CAA4B,UAACC,SAAD,EAAe;AACzCL,EAAAA,QAAQ,uCACeK,SADf,+BAC6CA,SAD7C,gCAEOA,SAFP,4CAEkDA,SAFlD,+FAIeA,SAJf,+BAI6CA,SAJ7C,gCAKOA,SALP,4CAKkDA,SALlD,+FAOeA,SAPf,+BAO6CA,SAP7C,gCAQOA,SARP,4CAQkDA,SARlD,8DAAR;AAUD,CAXD;eAaeL,Q","sourcesContent":["import * as models from '../models';\n\nlet queryStr = `\nCREATE OR REPLACE FUNCTION table_update_notify() RETURNS trigger AS $$\n  BEGIN\n    IF TG_OP = 'INSERT' then\n      PERFORM pg_notify('table_update', '{\"event\":\"' || TG_TABLE_NAME || '.created\", \"current\": ' || row_to_json(NEW) || '}');\n    ELSIF TG_OP = 'UPDATE' then\n      PERFORM pg_notify('table_update', '{\"event\":\"' || TG_TABLE_NAME || '.' || NEW.id || '.updated\", \"current\": ' || row_to_json(NEW) || ', \"previous\": ' || row_to_json(OLD) || '}');\n    ELSIF TG_OP = 'DELETE' then\n      PERFORM pg_notify('table_update', '{\"event\":\"' || TG_TABLE_NAME || '.deleted\", \"current\": ' || row_to_json(OLD) || '}');\n    END IF;\n    RETURN NEW;\n  END;\n$$ LANGUAGE plpgsql;\n`;\n\nObject.keys(models).forEach((modelName) => {\n  queryStr += `\nDROP TRIGGER IF EXISTS ${modelName}_notify_update ON ${modelName}s;\nCREATE TRIGGER ${modelName}_notify_update AFTER UPDATE ON ${modelName}s FOR EACH ROW EXECUTE PROCEDURE table_update_notify();\n\nDROP TRIGGER IF EXISTS ${modelName}_notify_insert ON ${modelName}s;\nCREATE TRIGGER ${modelName}_notify_insert AFTER INSERT ON ${modelName}s FOR EACH ROW EXECUTE PROCEDURE table_update_notify();\n\nDROP TRIGGER IF EXISTS ${modelName}_notify_delete ON ${modelName}s;\nCREATE TRIGGER ${modelName}_notify_delete AFTER DELETE ON ${modelName}s FOR EACH ROW EXECUTE PROCEDURE table_update_notify();\n`;\n});\n\nexport default queryStr;\n"],"file":"queryStr.js"}